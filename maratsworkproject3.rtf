{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Italic;}
{\colortbl;\red255\green255\blue255;\red204\green120\blue50;\red43\green43\blue43;\red169\green183\blue198;
\red152\green118\blue170;\red106\green135\blue89;\red187\green181\blue41;\red255\green198\blue109;\red128\green128\blue128;
\red52\green65\blue52;\red104\green151\blue187;}
\margl1440\margr1440\vieww19200\viewh14940\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 package \cf4 com.charlesdrews.hud\cf2 ;\uc0\u8232 \u8232 import \cf4 android.content.Context\cf2 ;\uc0\u8232 import \cf4 android.net.ConnectivityManager\cf2 ;\uc0\u8232 import \cf4 android.net.NetworkInfo\cf2 ;\uc0\u8232 import \cf4 android.os.AsyncTask\cf2 ;\uc0\u8232 import \cf4 android.os.Bundle\cf2 ;\uc0\u8232 import \cf4 android.support.design.widget.FloatingActionButton\cf2 ;\uc0\u8232 import \cf4 android.support.design.widget.Snackbar\cf2 ;\uc0\u8232 import \cf4 android.support.v7.app.AppCompatActivity\cf2 ;\uc0\u8232 import \cf4 android.support.v7.widget.Toolbar\cf2 ;\uc0\u8232 import \cf4 android.view.View\cf2 ;\uc0\u8232 import \cf4 android.view.Menu\cf2 ;\uc0\u8232 import \cf4 android.view.MenuItem\cf2 ;\uc0\u8232 import \cf4 android.widget.ArrayAdapter\cf2 ;\uc0\u8232 import \cf4 android.widget.ListView\cf2 ;\uc0\u8232 import \cf4 android.widget.Toast\cf2 ;\uc0\u8232 \u8232 import \cf4 org.json.JSONArray\cf2 ;\uc0\u8232 import \cf4 org.json.JSONException\cf2 ;\uc0\u8232 import \cf4 org.json.JSONObject\cf2 ;\uc0\u8232 \u8232 import \cf4 java.io.BufferedReader\cf2 ;\uc0\u8232 import \cf4 java.io.IOException\cf2 ;\uc0\u8232 import \cf4 java.io.InputStream\cf2 ;\uc0\u8232 import \cf4 java.io.InputStreamReader\cf2 ;\uc0\u8232 import \cf4 java.net.HttpURLConnection\cf2 ;\uc0\u8232 import \cf4 java.net.URL\cf2 ;\uc0\u8232 import \cf4 java.util.ArrayList\cf2 ;\uc0\u8232 \u8232 public class \cf4 MainActivity \cf2 extends \cf4 AppCompatActivity \{\uc0\u8232     String \cf5 mUrl \cf4 = \cf6 "http://api.wunderground.com/api/3933abd07c831d11/forecast/q/CA/San_Francisco.json"\cf2 ;\uc0\u8232     \cf4 ArrayAdapter \cf5 mAdapter\cf2 ;\uc0\u8232     \cf4 ArrayList<String> \cf5 mStringArray \cf4 = \cf2 new \cf4 ArrayList<String>()\cf2 ;\uc0\u8232     \cf4 ListView \cf5 mListView\cf2 ;\uc0\u8232     \cf4 DownloadAsyncTask \cf5 downloadAsyncTask\cf2 ;\uc0\u8232 \u8232     \cf7 @Override\uc0\u8232     \cf2 protected void \cf8 onCreate\cf4 (Bundle savedInstanceState) \{\uc0\u8232         \cf2 super\cf4 .onCreate(savedInstanceState)\cf2 ;\uc0\u8232         \cf4 setContentView(R.layout.
\f1\i \cf5 activity_main
\f0\i0 \cf4 )\cf2 ;\uc0\u8232         \cf4 Toolbar toolbar = (Toolbar) findViewById(R.id.
\f1\i \cf5 toolbar
\f0\i0 \cf4 )\cf2 ;\uc0\u8232         \cf4 setSupportActionBar(toolbar)\cf2 ;\uc0\u8232 \u8232         \cf5 mListView \cf4 = (ListView) findViewById(R.id.
\f1\i \cf5 listview
\f0\i0 \cf4 )\cf2 ;\uc0\u8232 \u8232         \cf5 mAdapter \cf4 = \cf2 new \cf4 ArrayAdapter<String>(MainActivity.\cf2 this,\cf4 android.R.layout.
\f1\i \cf5 simple_list_item_1
\f0\i0 \cf2 ,\cf5 mStringArray\cf4 )\cf2 ;\uc0\u8232         \cf5 mListView\cf4 .setAdapter(\cf5 mAdapter\cf4 )\cf2 ;\uc0\u8232 \u8232         \cf4 FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.
\f1\i \cf5 fab
\f0\i0 \cf4 )\cf2 ;\uc0\u8232         \cf4 fab.setOnClickListener(\cf2 new \cf4 View.OnClickListener() \{\uc0\u8232             \cf7 @Override\uc0\u8232             \cf2 public void \cf8 onClick\cf4 (View view) \{\uc0\u8232                 stopAsyncTask()\cf2 ;\uc0\u8232                 \cf4 \uc0\u8203 \u8232                 \cf5 downloadAsyncTask \cf4 = \cf2 new \cf4 DownloadAsyncTask()\cf2 ;\uc0\u8232                 \cf4 \uc0\u8203 \u8232                 \cf5 downloadAsyncTask\cf4 .execute(\cf5 mUrl\cf4 )\cf2 ;\uc0\u8232 \u8232             \cf4 \}\uc0\u8232         \})\cf2 ;\uc0\u8232     \cf4 \}\uc0\u8232 \u8232     \cf2 public void \cf8 stopAsyncTask \cf4 () \{\uc0\u8232         \cf2 if \cf4 (\cf5 downloadAsyncTask \cf4 != \cf2 null \cf4 && \cf5 downloadAsyncTask\cf4 .getStatus() != AsyncTask.Status.
\f1\i \cf5 FINISHED
\f0\i0 \cf4 )\{\uc0\u8232             \cf5 downloadAsyncTask\cf4 .cancel(\cf2 true\cf4 )\cf2 ;\uc0\u8232         \cf4 \}\uc0\u8232     \}\u8232 \u8232     \cf7 @Override\uc0\u8232     \cf2 public boolean \cf8 onCreateOptionsMenu\cf4 (Menu menu) \{\uc0\u8232         \cf9 // Inflate the menu; this adds items to the action bar if it is present.\uc0\u8232         \cf4 \cb10 getMenuInflater\cb3 ().inflate(R.menu.
\f1\i \cf5 menu_main
\f0\i0 \cf2 , \cf4 menu)\cf2 ;\uc0\u8232         return true;\u8232     \cf4 \}\uc0\u8232 \u8232     \cf7 @Override\uc0\u8232     \cf2 public boolean \cf8 onOptionsItemSelected\cf4 (MenuItem item) \{\uc0\u8232         \cf9 // Handle action bar item clicks here. The action bar will\uc0\u8232         // automatically handle clicks on the Home/Up button, so long\u8232         // as you specify a parent activity in AndroidManifest.xml.\u8232         \cf2 int \cf4 id = item.getItemId()\cf2 ;\uc0\u8232 \u8232         \cf9 //noinspection SimplifiableIfStatement\uc0\u8232         \cf2 if \cf4 (id == R.id.
\f1\i \cf5 action_settings
\f0\i0 \cf4 ) \{\uc0\u8232             \cf2 return true;\uc0\u8232         \cf4 \}\uc0\u8232 \u8232         \cf2 return super\cf4 .onOptionsItemSelected(item)\cf2 ;\uc0\u8232     \cf4 \}\uc0\u8232 \u8232     \cf2 private \cf4 String \cf8 getInputData\cf4 (InputStream inStream) \cf2 throws \cf4 IOException \{\uc0\u8232         StringBuilder builder = \cf2 new \cf4 StringBuilder()\cf2 ;\uc0\u8232         \cf4 BufferedReader reader = \cf2 new \cf4 BufferedReader( \cf2 new \cf4 InputStreamReader(inStream))\cf2 ;\uc0\u8232         \cf4 \uc0\u8203 \u8232         String data\cf2 ;\uc0\u8232         \cf4 \uc0\u8203 \u8232         \cf2 while \cf4 ((data = reader.readLine()) != \cf2 null\cf4 )\{\uc0\u8232             builder.append(data)\cf2 ;\uc0\u8232         \cf4 \}\uc0\u8232         \u8203 \u8232         reader.close()\cf2 ;\uc0\u8232         \cf4 \uc0\u8203 \u8232         \cf2 return \cf4 builder.toString()\cf2 ;\uc0\u8232     \cf4 \}\uc0\u8232 \u8232 \u8232     \cf2 public class \cf4 DownloadAsyncTask \cf2 extends \cf4 AsyncTask<String\cf2 , \cf4 Void\cf2 , \cf4 String>\{\uc0\u8232         \cf7 @Override\uc0\u8232         \cf2 protected \cf4 String \cf8 doInBackground\cf4 (String... urls) \{\uc0\u8232             String data = \cf6 ""\cf2 ;\uc0\u8232             try \cf4 \{\uc0\u8232                 URL url = \cf2 new \cf4 URL(urls[\cf11 0\cf4 ])\cf2 ;\uc0\u8232                 \cf4 HttpURLConnection connection = (HttpURLConnection) url.openConnection()\cf2 ;\uc0\u8232                 \cf4 connection.connect()\cf2 ;\uc0\u8232                 \cf4 \uc0\u8203 \u8232                 InputStream inStream = connection.getInputStream()\cf2 ;\uc0\u8232                 \cf4 \uc0\u8203 \u8232                 data = getInputData(inStream)\cf2 ;\uc0\u8232                 \cf4 \uc0\u8203 \u8232             \} \cf2 catch \cf4 (Throwable thr) \{\uc0\u8232                 thr.printStackTrace()\cf2 ;\uc0\u8232             \cf4 \}\uc0\u8232             \u8203 \u8232             \u8203 \u8232             \cf2 try \cf4 \{\uc0\u8232                 JSONObject dataObject = \cf2 new \cf4 JSONObject(data)\cf2 ;\uc0\u8232                 \cf4 \uc0\u8203 \u8232 \cf9 //                String status = dataObject.getString("stat");\uc0\u8232                 \cf4 JSONObject forecastJsonObject = dataObject.optJSONObject(\cf6 "forecast"\cf4 )\cf2 ;\uc0\u8232                 \cf4 JSONObject txtJsonObject = forecastJsonObject.optJSONObject(\cf6 "txt_forecast"\cf4 )\cf2 ;\uc0\u8232                 \cf4 JSONArray forecastJsonArray = txtJsonObject.optJSONArray(\cf6 "forecastday"\cf4 )\cf2 ;\uc0\u8232 \u8232                 \cf4 \uc0\u8203 \u8232                 \cf5 mStringArray\cf4 .clear()\cf2 ;\uc0\u8232                 \cf4 \uc0\u8203 \u8232                 \cf2 for \cf4 (\cf2 int \cf4 i = \cf11 0\cf2 ; \cf4 i < forecastJsonArray.length()\cf2 ; \cf4 i++)\{\uc0\u8232                     JSONObject object = forecastJsonArray.optJSONObject(i)\cf2 ;\uc0\u8232                     \cf4 String title = object.optString(\cf6 "title"\cf4 )\cf2 ;\uc0\u8232                     \cf4 String fcttext = object.optString(\cf6 "fcttext"\cf4 )\cf2 ;\uc0\u8232                     \cf4 \uc0\u8203 \u8232                     \cf5 mStringArray\cf4 .add(title + \cf6 "\cf2 \\n\\r\cf6 " \cf4 + fcttext)\cf2 ;\uc0\u8232                 \cf4 \}\uc0\u8232                 \u8203 \u8232             \} \cf2 catch \cf4 (JSONException e) \{\uc0\u8232                 e.printStackTrace()\cf2 ;\uc0\u8232             \cf4 \}\uc0\u8232             \u8203 \u8232             \u8203 \u8232             \cf2 return \cf4 data\cf2 ;\uc0\u8232         \cf4 \}\uc0\u8232         \u8203 \u8232         \cf7 @Override\uc0\u8232         \cf2 protected void \cf8 onPostExecute\cf4 (String data) \{\uc0\u8232             \cf2 super\cf4 .onPostExecute(data)\cf2 ;\uc0\u8232             \cf4 \uc0\u8203 \u8232             \cf5 mAdapter\cf4 .notifyDataSetChanged()\cf2 ;\uc0\u8232         \cf4 \}\uc0\u8232     \}\u8232 \}\u8232 \
}